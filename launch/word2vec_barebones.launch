<?xml version="1.0"?>
<launch>
<!-- A barebones package to give the option of running modules on the jetson nano
 -->
    <!-- 2. Setting the Arguments -->
    <!-- Careful with the default world - the mavlink default world requires other update rates -->
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0"/>
    <arg name="gui" default="True"/>
    <arg name="vehicle" default="iris"/>
    <arg name="model_name" value="iris_bottom_cam"/> <!-- model iris_dual_cam also possible-->
    <arg name="verbose" default="true"/>
    <arg name="world" default="$(find aruco_client)/worlds/word2vec_empty.world"/> <!-- Name is with respect to the Gazebo env variable -->
    <arg name="rcs-file" default="rcS_edit"/>
    <arg name="sim_case" default="1"/>

    <!-- 1. Including the launch file for the Mavros -->
    <include file="$(find px4)/launch/mavros_posix_sitl.launch">
        <arg name="x" value="$(arg x)"/>
        <arg name="y" value="$(arg y)"/>
        <arg name="z" value="$(arg z)"/>
        <arg name="R" value="$(arg R)"/>
        <arg name="P" value="$(arg P)"/>
        <arg name="Y" value="$(arg Y)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="vehicle" value="$(arg vehicle)" />
        <arg name="verbose" value="$(arg verbose)" />
        <arg name="world" value="$(arg world)" />
        <arg name="model_name" value="$(arg model_name)" />
        <arg name="rcs-file" value="$(arg rcs-file)" />
    </include>

    <!-- 3. Marker Detection from Kye - includes all the default configs -->
	 <include file="$(find ml_detector)/launch/marker_detect.launch">
        <arg name="image_topic" value="/$(arg model_name)/usb_cam/image_raw"/>
        <arg name="camera_info_topic" value="/$(arg model_name)/usb_cam/camera_info"/>
     </include>

    <!-- 4. Creating a broadcaster of the uav to the world  -->
    <node pkg="aruco_client" type="base_link_tf2_broadcaster" name="base_link_world"/>
    <!-- 4.1 Creating a static tf broadcaster, which broadcasts the transform from the camera to the base_link with the values from the iris sdf files -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="camera_tf_broadcaster" args="0.0 0.0 -0.03 1.57 3.14 0.0 base_link robot_camera_link"/> 
    
    <!-- 3.1 Displaying the image with the detections -->
    <node name="image_viewer" pkg="image_view" type="image_view" output="screen">
        <remap from="image" to="/ml_detector/image_overlay"/>
    </node>

    <!-- 6. Launching the Spawn file, which will launch the locations of the markers -->
    <node pkg="knowledge_server" name="Spawn_node" type="gazebo_spawning.py" output="screen" args="$(arg sim_case)"/>

    
</launch>


